import datetime

import telebot

from telebot import types
from threading import Thread
from function import *
from button import *
from config import *



bot = telebot.TeleBot(bot_token)

user_add = {
	'data': {
		'id': None,
		'name': None,
		'salary': None 
	},
	'status': None
}


@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö', reply_markup=button_)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	global user_add
	

	if call.data == 'yes_user_add':
		bot.edit_message_text(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', call.message.chat.id, call.message.message_id)
		add_employee(user_add['data'])
		user_add['data'] = {}
		user_add['status'] = None

	elif call.data == 'no_user_add':
		bot.edit_message_text(f'–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', call.message.chat.id, call.message.message_id)
		user_add['data'] = {}
		user_add['status'] = 'id'

	elif call.data == 'dell':
		bot.edit_message_text('üëü–£–≤–æ–ª–µ–Ω', call.message.chat.id, call.message.message_id)
		data = get_json()
		del data[call.message.text.split('---')[1]]
		post_json(data)

	user_id = str(call.message.chat.id)

	data = get_json()
	day = [str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).year), str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).day), str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).month)]


	if call.data == 'full':
		chose = call.message.text.split('"')[1]
		bot.edit_message_text(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ "{chose}"(–ü–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞)\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?', call.message.chat.id, call.message.message_id, reply_markup=button_confirm_full)

	if call.data == 'half':
		chose = call.message.text.split('"')[1]
		bot.edit_message_text(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ "{chose}"(–ù–µ–ø–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞)\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?', call.message.chat.id, call.message.message_id, reply_markup=button_confirm_half)

	if call.data == 'yes_full':
		chose = call.message.text.split('"')[1]
		data[user_id]['days'][f'{day[2]}.{day[1]}.{day[0]}'] = f'{chose}(–ü–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞)'

		bot.edit_message_text(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ "{chose}"', call.message.chat.id, call.message.message_id)

		for user in data.keys():
			if user_id != user:
				try:
					bot.send_message(user, f'{days_[interval_][user_id]["Name"]} –≤—ã–±—Ä–∞–ª "{chose}"(–ü–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞)', reply_markup=button_)
				except Exception as e:
					print(f'{user} - {e}')
		
	if call.data == 'yes_half':
		chose = call.message.text.split('"')[1]
		data[user_id]['days'][f'{day[2]}.{day[1]}.{day[0]}'] = f'{chose}(–ù–µ–ø–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞)'

		bot.edit_message_text(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ "{chose}"(–ù–µ–ø–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞)', call.message.chat.id, call.message.message_id)

		for user in data.keys():
			if user_id != user:
				try:
					bot.send_message(user, f'{data[user_id]["Name"]} –≤—ã–±—Ä–∞–ª "{chose}"(–ù–µ–ø–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞)', reply_markup=button_)
				except Exception as e:
					print(f'{user} - {e}')

	if call.data == 'yes':
		chose = call.message.text.split('"')[1]
		data[user_id]['days'][f'{day[2]}.{day[1]}.{day[0]}'] = chose

		bot.edit_message_text(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ "{chose}"', call.message.chat.id, call.message.message_id)

		for user in data.keys():
			if user_id != user:
				try:
					bot.send_message(user, f'{days_[interval_][user_id]["Name"]} –≤—ã–±—Ä–∞–ª "{chose}"', reply_markup=button_)
				except Exception as e:
					print(f'{user} - {e}')

	if call.data == 'no':
		bot.edit_message_text(f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç', call.message.chat.id, call.message.message_id)

	post_json(data)

def start_bot():
	while True:
		try:
			bot.polling(non_stop=True, interval=0)
		except Exception as e:
			print(e)

def check_date():
	while True:
		now = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).strftime('%H:%M:%S')
		if now == time_reminder:
			employee_list = get_json()

			day = [str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).year), str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).day), str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).month)]

			for user in employee_list:
				try:
					print(employee_list[user]['days'].keys())
					if f'{day[2]}.{day[1]}.{day[0]}' not in employee_list[user]['days'].keys():
						bot.send_message(user, f'üïì–ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä!', reply_markup=button_)
				except Exception as e:
					print(f'{user} - {e}')

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
	global user_add
	user_id = str(message.from_user.id)
	data = get_json()

	if user_id == admin_id:
		if message.text == 'üíº–ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫':
			user_add['status'] = 'id'
			bot.send_message(message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
			return

		elif message.text == 'üë®‚Äçüíª–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏':
			for employee in data:
				bot.send_message(message.chat.id,
					f"---{employee}---\n\n"
					f"–ò–º—è - {data[employee]['Name']}\n"
					f"–ó–∞—Ä–ø–ª–∞—Ç–∞ - {data[employee]['salary']}\n"
					f"–ö–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π - {len(data[employee]['days'])}", reply_markup=button_delete_user
				)
			return

		if user_add['status'] == 'id' and (message.forward_from):
			user_add['data']['id'] = str(message.forward_from.id)
			user_add['status'] = 'name'
			bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ –∏–º—è')
			return

		elif user_add['status'] == 'name':
			user_add['data']['name'] = message.text.strip()
			user_add['status'] = 'salary'
			bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç—É')
			return

		elif user_add['status'] == 'salary':
			user_add['data']['salary'] = int(message.text.strip())
			bot.send_message(message.chat.id,
				"–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –≤–µ—Ä–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö?\n\n"
				f"–ò–º—è - {user_add['data']['name']}\n"
				f"–ó–∞—Ä–ø–ª–∞—Ç–∞ - {user_add['data']['salary']}", reply_markup=button_confirm_user_add
				)
			return

	if user_id not in data.keys():
		bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, —Ç—ã –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (')
		return

	day = [str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).year), str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).day), str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=3))).month)]

	if data[user_id]['prepayment_status'] == '1':
		if message.text.isdigit():
			data[user_id]["prepayment"] += int(message.text)
			bot.send_message(message.chat.id, f'–í—ã –≤–∑—è–ª–∏ –∞–≤–∞–Ω—Å –Ω–∞ {message.text}—Ä—É–±.\n–í–∞—à —Ç–µ–∫—É—â–∏–π –∞–≤–∞–Ω—Å - {data[user_id]["prepayment"]}—Ä—É–±.', reply_markup=button_)
		else:
			bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!', reply_markup=button_)
		data[user_id]['prepayment_status'] = '0'
		post_json(data)

	if (message.text == 'üõ†Ô∏è–°–∞–º–æ—Ä–µ–∑+' or message.text == 'üõ¥–°–∞–º–æ–∫–∞—Ç+' or message.text == 'üè†–í—ã—Ö–æ–¥–Ω–æ–π') and user_id in data.keys():
		if f'{day[2]}.{day[1]}.{day[0]}' not in data[user_id]['days'].keys():
			if  message.text != 'üè†–í—ã—Ö–æ–¥–Ω–æ–π':
				bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ "{message.text}"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å', reply_markup=button_choose)
			else:
				bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ "{message.text}"', reply_markup=button_confirm)
		else:
			bot.send_message(message.chat.id, f'–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ "{data[user_id]["days"][f"{day[2]}.{day[1]}.{day[0]}"]}"', reply_markup=button_)

	elif message.text == 'üíµ–†–∞—Å—á–µ—Çüíµ':
		answer = calculation_money()

		bot.send_message(message.chat.id, answer, reply_markup=button_, parse_mode="Markdown")

	elif message.text == 'üíµ–ê–≤–∞–Ω—Åüíµ':
		data[user_id]['prepayment_status'] = '1'
		bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞–≤–∞–Ω—Å–∞\n–ë–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–æ—á–µ–∫, –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ!', reply_markup=types.ReplyKeyboardRemove())
		post_json(data)

if __name__ == '__main__':
	th_bot = Thread(target=start_bot)
	th_date = Thread(target=check_date)

	th_bot.start()
	th_date.start()
